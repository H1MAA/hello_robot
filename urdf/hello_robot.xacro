<?xml version="1.0"?>
<robot name="hello_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="baselen" value="0.23" />
  <xacro:property name="basewidth" value="0.26" />
  <xacro:property name="basethick" value="0.01" />
  <xacro:property name="wheeldiam" value="0.065" />
  <xacro:property name="wheelwidth" value="0.0325" />
  <xacro:property name="pi" value="3.1415" />

  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>

  <material name="black">
    <color rgba=".05 .05 .05 1"/>
  </material>

  <!-- ======================= Intertial macros ===============================-->
  <!-- ===================== Cylinder intertia xacro =============================
  Xacro with the intertial block of a cylinder. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro
  params:
  - m [float]: link mass;
  - r [float]: cylinder radius;
  - l [float]: cylinder lenght (height);
  -->
  <xacro:macro name="wheel_inertia" params="m r l o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+l*l)/12}" ixy = "0" ixz = "0" 
               iyy="${m*(3*r*r+l*l)/12}" iyz = "0" izz="${m*r*r/2}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>


  <!-- ===================== Box intertia xacro ==================================
  Xacro with the intertial block of a box. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro
  params:
  - m [float]: link mass;
  - x [float]: link dimension on the X-axis;
  - y [float]: link dimension on the Y-axis;
  - z [float]: link dimension on the Z-axis;
-->  

<xacro:macro name="base_inertia" params="m x y z o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (y*y + z*z)}" ixy="0.0" ixz="0.0"
               iyy="${m / 12.0 * (x*x + z*z)}" iyz="0.0" 
               izz="${m / 12.0 * (x*x + y*y)}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>


  <link name="base_link">
    <visual>
      <geometry>
        <box size="${baselen} ${basewidth} ${basethick}" />
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="${baselen} ${basewidth} ${basethick}" />
      </geometry>
    </collision>
    <xacro:base_inertia m="1" 
    x="${baselen}" y="${basewidth}" z="${basethick}" 
    o_xyz="0.0 0.0 0.0" o_rpy="0.0 0.0 0.0"
    />
  </link>

  <xacro:macro name="wheel" params="prefix suffix reflectfrontback reflectside">
    <link name="${prefix}_${suffix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheeldiam/2}" length="${wheelwidth}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheeldiam/2}" length="${wheelwidth}"/>
        </geometry>
      </collision>
      <xacro:wheel_inertia m="0.1" r="${wheeldiam/2}" l="${wheelwidth}" 
      o_xyz="0.0 0.0 0.0" o_rpy="0.0 0.0 0.0"
      />
    </link>
    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_${suffix}_wheel"/>
      <origin xyz="${baselen*reflectfrontback/3} ${((basewidth/2)+wheelwidth/2)*reflectside} ${-wheeldiam/2}" rpy="0 0 0"/>
    </joint>

        <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${prefix}_${suffix}_wheel">
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="${prefix}_${suffix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${prefix}_${suffix}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>
  </xacro:macro>

  <xacro:wheel prefix="left" suffix="front" reflectfrontback="1" reflectside="1"/>
  <xacro:wheel prefix="left" suffix="back" reflectfrontback="-1" reflectside="1"/>
  <xacro:wheel prefix="right" suffix="front" reflectfrontback="1" reflectside="-1"/>
  <xacro:wheel prefix="right" suffix="back" reflectfrontback="-1" reflectside="-1"/>

  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

</robot>